class Cart {
  constructor (userSettings = {} ) {
    this.settings = {
      cartProdSelector: ".product-mini-box",
      catalogProdSelector: ".product-box",
      cartSelector: ".cart",
      cartItemsContainerSelector: "#cart-item-group",
      dataSource: 'mock_cart_data.json'
    };
    Object.assign(this.settings, userSettings);
    this.items = [];
    this.maxID = 1000;
    this._init();

  }
  _init(){
    if (!localStorage.getItem('savedCart')) {
      // fetch(this.settings.dataSource)
      //   .then(response => response.json())
      //   .then(cart => {
      //     for (const item of cart.content) {
      //       this.items.push(item);
      //       this._renderItem(item);
      //     }
      //     this._updateTotalView();
      //   });
      $.get(this.settings.dataSource)
        .done(data => this._load(data))
        .fail(e => {
          // $.get();
          console.log("can't download json data ");
        });
    }
    this._updateTotalView();
  }

  _load(savedCart) {
    for (const item of savedCart.content) {
      this.items.push(item);
      this._renderItem(item);
    }
    this._updateTotalView();
  }

  _getAmount() {

    let total = 0;
    for (const item of this.items) {
      total += item.price * item.quantity
    }
    return total;
  }

  _getQuantity() {
    let totalQty = 0;
    for (const item of this.items) {
      totalQty += item.quantity;
    }
    return totalQty;
  }

  _updateItemView(item){
    const $itemView =$(`.cart-item[data-productid = "${item.id}"]`);
    $itemView.find('.cart-item-qty').text(item.quantity);
    $itemView.find('.cart-item-price').text(item.price);
  }

  _updateTotalView() {
    $(this.settings.cartSelector).find('.total-price').text('$' + this._getAmount().toFixed(2));

    if (this.items.length) {
      $('.cart-qty').text(this._getQuantity()).show(400) ;
    } else {
      $('.cart-qty').hide(400);
    }
  }
  addProduct(itemEl) {
    const $addedItemEl = $(itemEl);
    const sameItemInCart = this.items.find(item => item.id === $addedItemEl.data('id'));
    if (sameItemInCart) {
      sameItemInCart.quantity++;
      this._updateItemView(sameItemInCart);
    }
    else {
      let item = new CartItem(
        $addedItemEl.data('id'),
        $addedItemEl.data('name'),
        $addedItemEl.data('price'),
        $addedItemEl.data('img-src')
      );
      this.items.push(item);
      this._renderItem(item);
    }
    this._updateTotalView();
  }
  _renderRating(num) {
    let rating ="";
    for(let i = 0; i < parseInt(num); i++) {
      rating += '<i class="fas fa-star"></i>';
    }
    if (num % 1) rating += '<i class="fas fa-star-half-alt"></i>'
    return rating;
  }
  _renderItem(item) {
    const $container = $('<tr/>', {
      class: "cart-item",
      'data-productID': item.id,
    });

    $container.append( $(`<td><img style="height: 86px; width:72px" src="${item.imgSrc}" alt="cart-item"></td>`) );
    $container.append( $(
      `
        <td>
          <h3>${item.name}</h3>
          <p class="item-rating">${this._renderRating(item.rating)}</p>
          <p class="item-qty-price">
            <span class="cart-item-qty">${item.quantity}</span>
            x $<span class="cart-item-price">${item.price}</span>
          </p>
        </td>
      `)
    );
    const $delBtn = ( $('<td class="remove-item"><i class="fas fa-times-circle"></i></td>'));
    $container.append($delBtn);
    $delBtn.click(() => this._removeItem(item.id));

    $container.appendTo($(this.settings.cartItemsContainerSelector));//.find('.menu__drop'));
  }
  _removeItem(ID) {
    const itemForRemove = this.items.find(item => item.id === +ID);
    if (!itemForRemove) return;

    itemForRemove.quantity--;
    this._updateItemView(itemForRemove);

    if (itemForRemove.quantity < 1) {
      this.items = this.items.filter(item => item.id !== ID);
      $(`.cart-item[data-productid = "${ID}"]`).remove();
    }
    this._updateTotalView();
  }
}

class CartItem {
  constructor(id, name, price, img = 'https://placehold.it/72x86', quantity = 1) {
    this.price = +price;
    this.id = id;
    this.name = name;
    this.quantity = +quantity;
    this.imgSrc = img;
  }
}

class PageCart extends Cart {
  constructor (userSettings = {}) {
    super(userSettings);
    this.settings.pageCartSelector = '.shopping-cart__item-group';
    Object.assign(this.settings, userSettings);
    console.dir(this.settings);

  };
  _renderItem(item) {
    super._renderItem(item);
    const $container = $('<tr/>', {
      class: "cart-item",
      'data-productID': item.id,
    });
    $container.append($( `
      <td class="prod-info-detail">
        <dl class="cart-box">
          <a href="#">
            <dt class="prod-pic">
              <img src="${item.imgSrc}" alt="cart-item">
            </dt>
            <dd class="prod-desc">
              <h2 class="prod-name">${item.name}</h2>
              <dl>
                <dt class="char">Color:</dt>
                <dd>${item.color}</dd>
                <br>
                <dt class="char">Size:</dt>
                <dd>${item.size}</dd>
              </dl>
            </dd>
          </a>
        </dl>
      </td>
      <td class="prod-price">$${item.price}</td>
      <td class="prod-quantity"><input class=".cart-item-qty" type="number" value="${item.quantity}" min="1"></td>
      <td class="prod-shipping">${item.shipping}</td>
      <td class="prod-subtotal">$${item.price * item.quantity}</td>
    `));

    const $delBtn = $('<td class="prod-operate"><i class="fas fa-times-circle remove-item"></i></td>');
    $container.append($delBtn);
    $delBtn.click(() => this._removeItem(item.id));
    $container.appendTo($(this.settings.pageCartSelector));
  }
  _updateItemView(item) {
    super._updateItemView(item);
    console.dir($(`.cart-item[data-productid="${item.id}"]`).find('input').val(item.quantity));
  }
  clear() {
    $('.cart-item').remove();
    this.items = [];
    this._updateTotalView();
  }
}